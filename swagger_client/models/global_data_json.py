# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GlobalDataJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_settings': 'list[ClusterSettingJson]',
        'uccx_settings': 'dict(str, UccxMetadataJson)',
        'pcce_metadata': 'dict(str, PcceMetadataJson)',
        'cucm_metadata': 'dict(str, CucmMetadataJson)'
    }

    attribute_map = {
        'cluster_settings': 'clusterSettings',
        'uccx_settings': 'uccxSettings',
        'pcce_metadata': 'pcceMetadata',
        'cucm_metadata': 'cucmMetadata'
    }

    def __init__(self, cluster_settings=None, uccx_settings=None, pcce_metadata=None, cucm_metadata=None):  # noqa: E501
        """GlobalDataJson - a model defined in Swagger"""  # noqa: E501
        self._cluster_settings = None
        self._uccx_settings = None
        self._pcce_metadata = None
        self._cucm_metadata = None
        self.discriminator = None
        if cluster_settings is not None:
            self.cluster_settings = cluster_settings
        if uccx_settings is not None:
            self.uccx_settings = uccx_settings
        if pcce_metadata is not None:
            self.pcce_metadata = pcce_metadata
        if cucm_metadata is not None:
            self.cucm_metadata = cucm_metadata

    @property
    def cluster_settings(self):
        """Gets the cluster_settings of this GlobalDataJson.  # noqa: E501


        :return: The cluster_settings of this GlobalDataJson.  # noqa: E501
        :rtype: list[ClusterSettingJson]
        """
        return self._cluster_settings

    @cluster_settings.setter
    def cluster_settings(self, cluster_settings):
        """Sets the cluster_settings of this GlobalDataJson.


        :param cluster_settings: The cluster_settings of this GlobalDataJson.  # noqa: E501
        :type: list[ClusterSettingJson]
        """

        self._cluster_settings = cluster_settings

    @property
    def uccx_settings(self):
        """Gets the uccx_settings of this GlobalDataJson.  # noqa: E501


        :return: The uccx_settings of this GlobalDataJson.  # noqa: E501
        :rtype: dict(str, UccxMetadataJson)
        """
        return self._uccx_settings

    @uccx_settings.setter
    def uccx_settings(self, uccx_settings):
        """Sets the uccx_settings of this GlobalDataJson.


        :param uccx_settings: The uccx_settings of this GlobalDataJson.  # noqa: E501
        :type: dict(str, UccxMetadataJson)
        """

        self._uccx_settings = uccx_settings

    @property
    def pcce_metadata(self):
        """Gets the pcce_metadata of this GlobalDataJson.  # noqa: E501


        :return: The pcce_metadata of this GlobalDataJson.  # noqa: E501
        :rtype: dict(str, PcceMetadataJson)
        """
        return self._pcce_metadata

    @pcce_metadata.setter
    def pcce_metadata(self, pcce_metadata):
        """Sets the pcce_metadata of this GlobalDataJson.


        :param pcce_metadata: The pcce_metadata of this GlobalDataJson.  # noqa: E501
        :type: dict(str, PcceMetadataJson)
        """

        self._pcce_metadata = pcce_metadata

    @property
    def cucm_metadata(self):
        """Gets the cucm_metadata of this GlobalDataJson.  # noqa: E501


        :return: The cucm_metadata of this GlobalDataJson.  # noqa: E501
        :rtype: dict(str, CucmMetadataJson)
        """
        return self._cucm_metadata

    @cucm_metadata.setter
    def cucm_metadata(self, cucm_metadata):
        """Sets the cucm_metadata of this GlobalDataJson.


        :param cucm_metadata: The cucm_metadata of this GlobalDataJson.  # noqa: E501
        :type: dict(str, CucmMetadataJson)
        """

        self._cucm_metadata = cucm_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalDataJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalDataJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
