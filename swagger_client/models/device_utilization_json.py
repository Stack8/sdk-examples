# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DeviceUtilizationJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'owner_id': 'str',
        'model': 'str',
        'device_type': 'str',
        'description': 'str',
        'device_pool': 'str',
        'cluster_id': 'str',
        'total_duration_in_seconds': 'int'
    }

    attribute_map = {
        'device_name': 'deviceName',
        'owner_id': 'ownerId',
        'model': 'model',
        'device_type': 'deviceType',
        'description': 'description',
        'device_pool': 'devicePool',
        'cluster_id': 'clusterId',
        'total_duration_in_seconds': 'totalDurationInSeconds'
    }

    def __init__(self, device_name=None, owner_id=None, model=None, device_type=None, description=None, device_pool=None, cluster_id=None, total_duration_in_seconds=None):  # noqa: E501
        """DeviceUtilizationJson - a model defined in Swagger"""  # noqa: E501
        self._device_name = None
        self._owner_id = None
        self._model = None
        self._device_type = None
        self._description = None
        self._device_pool = None
        self._cluster_id = None
        self._total_duration_in_seconds = None
        self.discriminator = None
        if device_name is not None:
            self.device_name = device_name
        if owner_id is not None:
            self.owner_id = owner_id
        if model is not None:
            self.model = model
        if device_type is not None:
            self.device_type = device_type
        if description is not None:
            self.description = description
        if device_pool is not None:
            self.device_pool = device_pool
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if total_duration_in_seconds is not None:
            self.total_duration_in_seconds = total_duration_in_seconds

    @property
    def device_name(self):
        """Gets the device_name of this DeviceUtilizationJson.  # noqa: E501


        :return: The device_name of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceUtilizationJson.


        :param device_name: The device_name of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def owner_id(self):
        """Gets the owner_id of this DeviceUtilizationJson.  # noqa: E501


        :return: The owner_id of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this DeviceUtilizationJson.


        :param owner_id: The owner_id of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def model(self):
        """Gets the model of this DeviceUtilizationJson.  # noqa: E501


        :return: The model of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceUtilizationJson.


        :param model: The model of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def device_type(self):
        """Gets the device_type of this DeviceUtilizationJson.  # noqa: E501


        :return: The device_type of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceUtilizationJson.


        :param device_type: The device_type of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["DESK_PHONE", "IM_SOFTPHONE", "ANDROID", "IPHONE", "TABLET", "EXTENSION_MOBILITY", "CIPC", "SINGLE_NUMBER_REACH", "CTI_PORT", "CTI_REMOTE_DEVICE", "SPARK_REMOTE_DEVICE"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def description(self):
        """Gets the description of this DeviceUtilizationJson.  # noqa: E501


        :return: The description of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceUtilizationJson.


        :param description: The description of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_pool(self):
        """Gets the device_pool of this DeviceUtilizationJson.  # noqa: E501


        :return: The device_pool of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._device_pool

    @device_pool.setter
    def device_pool(self, device_pool):
        """Sets the device_pool of this DeviceUtilizationJson.


        :param device_pool: The device_pool of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """

        self._device_pool = device_pool

    @property
    def cluster_id(self):
        """Gets the cluster_id of this DeviceUtilizationJson.  # noqa: E501


        :return: The cluster_id of this DeviceUtilizationJson.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this DeviceUtilizationJson.


        :param cluster_id: The cluster_id of this DeviceUtilizationJson.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def total_duration_in_seconds(self):
        """Gets the total_duration_in_seconds of this DeviceUtilizationJson.  # noqa: E501


        :return: The total_duration_in_seconds of this DeviceUtilizationJson.  # noqa: E501
        :rtype: int
        """
        return self._total_duration_in_seconds

    @total_duration_in_seconds.setter
    def total_duration_in_seconds(self, total_duration_in_seconds):
        """Sets the total_duration_in_seconds of this DeviceUtilizationJson.


        :param total_duration_in_seconds: The total_duration_in_seconds of this DeviceUtilizationJson.  # noqa: E501
        :type: int
        """

        self._total_duration_in_seconds = total_duration_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUtilizationJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUtilizationJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
