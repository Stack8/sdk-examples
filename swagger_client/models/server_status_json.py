# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServerStatusJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'cause': 'str',
        'url': 'str',
        'server_type': 'str'
    }

    attribute_map = {
        'state': 'state',
        'cause': 'cause',
        'url': 'url',
        'server_type': 'serverType'
    }

    def __init__(self, state=None, cause=None, url=None, server_type=None):  # noqa: E501
        """ServerStatusJson - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._cause = None
        self._url = None
        self._server_type = None
        self.discriminator = None
        self.state = state
        if cause is not None:
            self.cause = cause
        if url is not None:
            self.url = url
        if server_type is not None:
            self.server_type = server_type

    @property
    def state(self):
        """Gets the state of this ServerStatusJson.  # noqa: E501


        :return: The state of this ServerStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServerStatusJson.


        :param state: The state of this ServerStatusJson.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "Warning", "Error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def cause(self):
        """Gets the cause of this ServerStatusJson.  # noqa: E501


        :return: The cause of this ServerStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this ServerStatusJson.


        :param cause: The cause of this ServerStatusJson.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def url(self):
        """Gets the url of this ServerStatusJson.  # noqa: E501


        :return: The url of this ServerStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServerStatusJson.


        :param url: The url of this ServerStatusJson.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def server_type(self):
        """Gets the server_type of this ServerStatusJson.  # noqa: E501


        :return: The server_type of this ServerStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this ServerStatusJson.


        :param server_type: The server_type of this ServerStatusJson.  # noqa: E501
        :type: str
        """

        self._server_type = server_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerStatusJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerStatusJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
