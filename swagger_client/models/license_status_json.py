# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LicenseStatusJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'cause': 'str',
        'num_licenses_in_use': 'int',
        'num_total_licenses': 'int',
        'expiry_date': 'str'
    }

    attribute_map = {
        'state': 'state',
        'cause': 'cause',
        'num_licenses_in_use': 'numLicensesInUse',
        'num_total_licenses': 'numTotalLicenses',
        'expiry_date': 'expiryDate'
    }

    def __init__(self, state=None, cause=None, num_licenses_in_use=None, num_total_licenses=None, expiry_date=None):  # noqa: E501
        """LicenseStatusJson - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._cause = None
        self._num_licenses_in_use = None
        self._num_total_licenses = None
        self._expiry_date = None
        self.discriminator = None
        self.state = state
        if cause is not None:
            self.cause = cause
        if num_licenses_in_use is not None:
            self.num_licenses_in_use = num_licenses_in_use
        if num_total_licenses is not None:
            self.num_total_licenses = num_total_licenses
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def state(self):
        """Gets the state of this LicenseStatusJson.  # noqa: E501


        :return: The state of this LicenseStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LicenseStatusJson.


        :param state: The state of this LicenseStatusJson.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "Warning", "Error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def cause(self):
        """Gets the cause of this LicenseStatusJson.  # noqa: E501


        :return: The cause of this LicenseStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this LicenseStatusJson.


        :param cause: The cause of this LicenseStatusJson.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def num_licenses_in_use(self):
        """Gets the num_licenses_in_use of this LicenseStatusJson.  # noqa: E501


        :return: The num_licenses_in_use of this LicenseStatusJson.  # noqa: E501
        :rtype: int
        """
        return self._num_licenses_in_use

    @num_licenses_in_use.setter
    def num_licenses_in_use(self, num_licenses_in_use):
        """Sets the num_licenses_in_use of this LicenseStatusJson.


        :param num_licenses_in_use: The num_licenses_in_use of this LicenseStatusJson.  # noqa: E501
        :type: int
        """

        self._num_licenses_in_use = num_licenses_in_use

    @property
    def num_total_licenses(self):
        """Gets the num_total_licenses of this LicenseStatusJson.  # noqa: E501


        :return: The num_total_licenses of this LicenseStatusJson.  # noqa: E501
        :rtype: int
        """
        return self._num_total_licenses

    @num_total_licenses.setter
    def num_total_licenses(self, num_total_licenses):
        """Sets the num_total_licenses of this LicenseStatusJson.


        :param num_total_licenses: The num_total_licenses of this LicenseStatusJson.  # noqa: E501
        :type: int
        """

        self._num_total_licenses = num_total_licenses

    @property
    def expiry_date(self):
        """Gets the expiry_date of this LicenseStatusJson.  # noqa: E501


        :return: The expiry_date of this LicenseStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this LicenseStatusJson.


        :param expiry_date: The expiry_date of this LicenseStatusJson.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseStatusJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseStatusJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
