# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ButtonTemplateJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_id': 'str',
        'buttons': 'list[ButtonMetadata]',
        'available_features': 'list[str]'
    }

    attribute_map = {
        'template_id': 'templateId',
        'buttons': 'buttons',
        'available_features': 'availableFeatures'
    }

    def __init__(self, template_id=None, buttons=None, available_features=None):  # noqa: E501
        """ButtonTemplateJson - a model defined in Swagger"""  # noqa: E501
        self._template_id = None
        self._buttons = None
        self._available_features = None
        self.discriminator = None
        if template_id is not None:
            self.template_id = template_id
        if buttons is not None:
            self.buttons = buttons
        if available_features is not None:
            self.available_features = available_features

    @property
    def template_id(self):
        """Gets the template_id of this ButtonTemplateJson.  # noqa: E501


        :return: The template_id of this ButtonTemplateJson.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this ButtonTemplateJson.


        :param template_id: The template_id of this ButtonTemplateJson.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def buttons(self):
        """Gets the buttons of this ButtonTemplateJson.  # noqa: E501


        :return: The buttons of this ButtonTemplateJson.  # noqa: E501
        :rtype: list[ButtonMetadata]
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this ButtonTemplateJson.


        :param buttons: The buttons of this ButtonTemplateJson.  # noqa: E501
        :type: list[ButtonMetadata]
        """

        self._buttons = buttons

    @property
    def available_features(self):
        """Gets the available_features of this ButtonTemplateJson.  # noqa: E501


        :return: The available_features of this ButtonTemplateJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_features

    @available_features.setter
    def available_features(self, available_features):
        """Sets the available_features of this ButtonTemplateJson.


        :param available_features: The available_features of this ButtonTemplateJson.  # noqa: E501
        :type: list[str]
        """

        self._available_features = available_features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ButtonTemplateJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ButtonTemplateJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
