# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemHealthStatusJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_statuses': 'list[ServerStatusJson]',
        'license_status': 'LicenseStatusJson',
        'traffic_status': 'TrafficStatusJson',
        'generated_time': 'str'
    }

    attribute_map = {
        'server_statuses': 'serverStatuses',
        'license_status': 'licenseStatus',
        'traffic_status': 'trafficStatus',
        'generated_time': 'generatedTime'
    }

    def __init__(self, server_statuses=None, license_status=None, traffic_status=None, generated_time=None):  # noqa: E501
        """SystemHealthStatusJson - a model defined in Swagger"""  # noqa: E501
        self._server_statuses = None
        self._license_status = None
        self._traffic_status = None
        self._generated_time = None
        self.discriminator = None
        self.server_statuses = server_statuses
        self.license_status = license_status
        self.traffic_status = traffic_status
        self.generated_time = generated_time

    @property
    def server_statuses(self):
        """Gets the server_statuses of this SystemHealthStatusJson.  # noqa: E501


        :return: The server_statuses of this SystemHealthStatusJson.  # noqa: E501
        :rtype: list[ServerStatusJson]
        """
        return self._server_statuses

    @server_statuses.setter
    def server_statuses(self, server_statuses):
        """Sets the server_statuses of this SystemHealthStatusJson.


        :param server_statuses: The server_statuses of this SystemHealthStatusJson.  # noqa: E501
        :type: list[ServerStatusJson]
        """
        if server_statuses is None:
            raise ValueError("Invalid value for `server_statuses`, must not be `None`")  # noqa: E501

        self._server_statuses = server_statuses

    @property
    def license_status(self):
        """Gets the license_status of this SystemHealthStatusJson.  # noqa: E501


        :return: The license_status of this SystemHealthStatusJson.  # noqa: E501
        :rtype: LicenseStatusJson
        """
        return self._license_status

    @license_status.setter
    def license_status(self, license_status):
        """Sets the license_status of this SystemHealthStatusJson.


        :param license_status: The license_status of this SystemHealthStatusJson.  # noqa: E501
        :type: LicenseStatusJson
        """
        if license_status is None:
            raise ValueError("Invalid value for `license_status`, must not be `None`")  # noqa: E501

        self._license_status = license_status

    @property
    def traffic_status(self):
        """Gets the traffic_status of this SystemHealthStatusJson.  # noqa: E501


        :return: The traffic_status of this SystemHealthStatusJson.  # noqa: E501
        :rtype: TrafficStatusJson
        """
        return self._traffic_status

    @traffic_status.setter
    def traffic_status(self, traffic_status):
        """Sets the traffic_status of this SystemHealthStatusJson.


        :param traffic_status: The traffic_status of this SystemHealthStatusJson.  # noqa: E501
        :type: TrafficStatusJson
        """
        if traffic_status is None:
            raise ValueError("Invalid value for `traffic_status`, must not be `None`")  # noqa: E501

        self._traffic_status = traffic_status

    @property
    def generated_time(self):
        """Gets the generated_time of this SystemHealthStatusJson.  # noqa: E501


        :return: The generated_time of this SystemHealthStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._generated_time

    @generated_time.setter
    def generated_time(self, generated_time):
        """Sets the generated_time of this SystemHealthStatusJson.


        :param generated_time: The generated_time of this SystemHealthStatusJson.  # noqa: E501
        :type: str
        """
        if generated_time is None:
            raise ValueError("Invalid value for `generated_time`, must not be `None`")  # noqa: E501

        self._generated_time = generated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemHealthStatusJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemHealthStatusJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
