# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LicenseInfoJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'total_licenses': 'int',
        'total_used_licenses': 'int',
        'expiry_date': 'str',
        'modules': 'LicenseModulesJson',
        'license_count_breakdown': 'list[LicenseCountJson]'
    }

    attribute_map = {
        'company': 'company',
        'total_licenses': 'totalLicenses',
        'total_used_licenses': 'totalUsedLicenses',
        'expiry_date': 'expiryDate',
        'modules': 'modules',
        'license_count_breakdown': 'licenseCountBreakdown'
    }

    def __init__(self, company=None, total_licenses=None, total_used_licenses=None, expiry_date=None, modules=None, license_count_breakdown=None):  # noqa: E501
        """LicenseInfoJson - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._total_licenses = None
        self._total_used_licenses = None
        self._expiry_date = None
        self._modules = None
        self._license_count_breakdown = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if total_licenses is not None:
            self.total_licenses = total_licenses
        if total_used_licenses is not None:
            self.total_used_licenses = total_used_licenses
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if modules is not None:
            self.modules = modules
        if license_count_breakdown is not None:
            self.license_count_breakdown = license_count_breakdown

    @property
    def company(self):
        """Gets the company of this LicenseInfoJson.  # noqa: E501


        :return: The company of this LicenseInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this LicenseInfoJson.


        :param company: The company of this LicenseInfoJson.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def total_licenses(self):
        """Gets the total_licenses of this LicenseInfoJson.  # noqa: E501


        :return: The total_licenses of this LicenseInfoJson.  # noqa: E501
        :rtype: int
        """
        return self._total_licenses

    @total_licenses.setter
    def total_licenses(self, total_licenses):
        """Sets the total_licenses of this LicenseInfoJson.


        :param total_licenses: The total_licenses of this LicenseInfoJson.  # noqa: E501
        :type: int
        """

        self._total_licenses = total_licenses

    @property
    def total_used_licenses(self):
        """Gets the total_used_licenses of this LicenseInfoJson.  # noqa: E501


        :return: The total_used_licenses of this LicenseInfoJson.  # noqa: E501
        :rtype: int
        """
        return self._total_used_licenses

    @total_used_licenses.setter
    def total_used_licenses(self, total_used_licenses):
        """Sets the total_used_licenses of this LicenseInfoJson.


        :param total_used_licenses: The total_used_licenses of this LicenseInfoJson.  # noqa: E501
        :type: int
        """

        self._total_used_licenses = total_used_licenses

    @property
    def expiry_date(self):
        """Gets the expiry_date of this LicenseInfoJson.  # noqa: E501


        :return: The expiry_date of this LicenseInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this LicenseInfoJson.


        :param expiry_date: The expiry_date of this LicenseInfoJson.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def modules(self):
        """Gets the modules of this LicenseInfoJson.  # noqa: E501


        :return: The modules of this LicenseInfoJson.  # noqa: E501
        :rtype: LicenseModulesJson
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this LicenseInfoJson.


        :param modules: The modules of this LicenseInfoJson.  # noqa: E501
        :type: LicenseModulesJson
        """

        self._modules = modules

    @property
    def license_count_breakdown(self):
        """Gets the license_count_breakdown of this LicenseInfoJson.  # noqa: E501


        :return: The license_count_breakdown of this LicenseInfoJson.  # noqa: E501
        :rtype: list[LicenseCountJson]
        """
        return self._license_count_breakdown

    @license_count_breakdown.setter
    def license_count_breakdown(self, license_count_breakdown):
        """Sets the license_count_breakdown of this LicenseInfoJson.


        :param license_count_breakdown: The license_count_breakdown of this LicenseInfoJson.  # noqa: E501
        :type: list[LicenseCountJson]
        """

        self._license_count_breakdown = license_count_breakdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseInfoJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseInfoJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
