# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Global360ViewJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_extensions': 'list[DirectoryNumberRefJson]',
        'ipcc_extensions': 'list[DirectoryNumberRefJson]',
        'translation_patterns': 'list[TranslationPatternRefJson]',
        'phones': 'list[PhoneRefJson]',
        'extension_mobilities': 'list[ExtensionMobilityRefJson]',
        'snr_profiles': 'list[SnrProfileRefJson]',
        'voicemails': 'list[VoicemailRefJson]',
        'agents': 'list[AgentRefJson]',
        'end_users': 'list[EndUserResultJson]',
        'sites': 'list[SiteSearchResultJson]'
    }

    attribute_map = {
        'primary_extensions': 'primaryExtensions',
        'ipcc_extensions': 'ipccExtensions',
        'translation_patterns': 'translationPatterns',
        'phones': 'phones',
        'extension_mobilities': 'extensionMobilities',
        'snr_profiles': 'snrProfiles',
        'voicemails': 'voicemails',
        'agents': 'agents',
        'end_users': 'endUsers',
        'sites': 'sites'
    }

    def __init__(self, primary_extensions=None, ipcc_extensions=None, translation_patterns=None, phones=None, extension_mobilities=None, snr_profiles=None, voicemails=None, agents=None, end_users=None, sites=None):  # noqa: E501
        """Global360ViewJson - a model defined in Swagger"""  # noqa: E501
        self._primary_extensions = None
        self._ipcc_extensions = None
        self._translation_patterns = None
        self._phones = None
        self._extension_mobilities = None
        self._snr_profiles = None
        self._voicemails = None
        self._agents = None
        self._end_users = None
        self._sites = None
        self.discriminator = None
        if primary_extensions is not None:
            self.primary_extensions = primary_extensions
        if ipcc_extensions is not None:
            self.ipcc_extensions = ipcc_extensions
        if translation_patterns is not None:
            self.translation_patterns = translation_patterns
        if phones is not None:
            self.phones = phones
        if extension_mobilities is not None:
            self.extension_mobilities = extension_mobilities
        if snr_profiles is not None:
            self.snr_profiles = snr_profiles
        if voicemails is not None:
            self.voicemails = voicemails
        if agents is not None:
            self.agents = agents
        if end_users is not None:
            self.end_users = end_users
        if sites is not None:
            self.sites = sites

    @property
    def primary_extensions(self):
        """Gets the primary_extensions of this Global360ViewJson.  # noqa: E501


        :return: The primary_extensions of this Global360ViewJson.  # noqa: E501
        :rtype: list[DirectoryNumberRefJson]
        """
        return self._primary_extensions

    @primary_extensions.setter
    def primary_extensions(self, primary_extensions):
        """Sets the primary_extensions of this Global360ViewJson.


        :param primary_extensions: The primary_extensions of this Global360ViewJson.  # noqa: E501
        :type: list[DirectoryNumberRefJson]
        """

        self._primary_extensions = primary_extensions

    @property
    def ipcc_extensions(self):
        """Gets the ipcc_extensions of this Global360ViewJson.  # noqa: E501


        :return: The ipcc_extensions of this Global360ViewJson.  # noqa: E501
        :rtype: list[DirectoryNumberRefJson]
        """
        return self._ipcc_extensions

    @ipcc_extensions.setter
    def ipcc_extensions(self, ipcc_extensions):
        """Sets the ipcc_extensions of this Global360ViewJson.


        :param ipcc_extensions: The ipcc_extensions of this Global360ViewJson.  # noqa: E501
        :type: list[DirectoryNumberRefJson]
        """

        self._ipcc_extensions = ipcc_extensions

    @property
    def translation_patterns(self):
        """Gets the translation_patterns of this Global360ViewJson.  # noqa: E501


        :return: The translation_patterns of this Global360ViewJson.  # noqa: E501
        :rtype: list[TranslationPatternRefJson]
        """
        return self._translation_patterns

    @translation_patterns.setter
    def translation_patterns(self, translation_patterns):
        """Sets the translation_patterns of this Global360ViewJson.


        :param translation_patterns: The translation_patterns of this Global360ViewJson.  # noqa: E501
        :type: list[TranslationPatternRefJson]
        """

        self._translation_patterns = translation_patterns

    @property
    def phones(self):
        """Gets the phones of this Global360ViewJson.  # noqa: E501


        :return: The phones of this Global360ViewJson.  # noqa: E501
        :rtype: list[PhoneRefJson]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Global360ViewJson.


        :param phones: The phones of this Global360ViewJson.  # noqa: E501
        :type: list[PhoneRefJson]
        """

        self._phones = phones

    @property
    def extension_mobilities(self):
        """Gets the extension_mobilities of this Global360ViewJson.  # noqa: E501


        :return: The extension_mobilities of this Global360ViewJson.  # noqa: E501
        :rtype: list[ExtensionMobilityRefJson]
        """
        return self._extension_mobilities

    @extension_mobilities.setter
    def extension_mobilities(self, extension_mobilities):
        """Sets the extension_mobilities of this Global360ViewJson.


        :param extension_mobilities: The extension_mobilities of this Global360ViewJson.  # noqa: E501
        :type: list[ExtensionMobilityRefJson]
        """

        self._extension_mobilities = extension_mobilities

    @property
    def snr_profiles(self):
        """Gets the snr_profiles of this Global360ViewJson.  # noqa: E501


        :return: The snr_profiles of this Global360ViewJson.  # noqa: E501
        :rtype: list[SnrProfileRefJson]
        """
        return self._snr_profiles

    @snr_profiles.setter
    def snr_profiles(self, snr_profiles):
        """Sets the snr_profiles of this Global360ViewJson.


        :param snr_profiles: The snr_profiles of this Global360ViewJson.  # noqa: E501
        :type: list[SnrProfileRefJson]
        """

        self._snr_profiles = snr_profiles

    @property
    def voicemails(self):
        """Gets the voicemails of this Global360ViewJson.  # noqa: E501


        :return: The voicemails of this Global360ViewJson.  # noqa: E501
        :rtype: list[VoicemailRefJson]
        """
        return self._voicemails

    @voicemails.setter
    def voicemails(self, voicemails):
        """Sets the voicemails of this Global360ViewJson.


        :param voicemails: The voicemails of this Global360ViewJson.  # noqa: E501
        :type: list[VoicemailRefJson]
        """

        self._voicemails = voicemails

    @property
    def agents(self):
        """Gets the agents of this Global360ViewJson.  # noqa: E501


        :return: The agents of this Global360ViewJson.  # noqa: E501
        :rtype: list[AgentRefJson]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this Global360ViewJson.


        :param agents: The agents of this Global360ViewJson.  # noqa: E501
        :type: list[AgentRefJson]
        """

        self._agents = agents

    @property
    def end_users(self):
        """Gets the end_users of this Global360ViewJson.  # noqa: E501


        :return: The end_users of this Global360ViewJson.  # noqa: E501
        :rtype: list[EndUserResultJson]
        """
        return self._end_users

    @end_users.setter
    def end_users(self, end_users):
        """Sets the end_users of this Global360ViewJson.


        :param end_users: The end_users of this Global360ViewJson.  # noqa: E501
        :type: list[EndUserResultJson]
        """

        self._end_users = end_users

    @property
    def sites(self):
        """Gets the sites of this Global360ViewJson.  # noqa: E501


        :return: The sites of this Global360ViewJson.  # noqa: E501
        :rtype: list[SiteSearchResultJson]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this Global360ViewJson.


        :param sites: The sites of this Global360ViewJson.  # noqa: E501
        :type: list[SiteSearchResultJson]
        """

        self._sites = sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Global360ViewJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Global360ViewJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
