# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServiceSettingJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'quick_add_enabled': 'bool',
        'custom_input_texts': 'list[CustomInputTextJson]',
        'custom_selects': 'list[CustomSelectJson]',
        'selects': 'list[SelectJson]',
        'custom_multi_selects': 'list[CustomMultiSelectJson]',
        'multi_selects': 'list[MultiSelectJson]',
        'custom_checkboxes': 'list[CustomCheckboxJson]',
        'enabled': 'str',
        'show_common_fields': 'bool',
        'show_hide_icon': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'quick_add_enabled': 'quickAddEnabled',
        'custom_input_texts': 'customInputTexts',
        'custom_selects': 'customSelects',
        'selects': 'selects',
        'custom_multi_selects': 'customMultiSelects',
        'multi_selects': 'multiSelects',
        'custom_checkboxes': 'customCheckboxes',
        'enabled': 'enabled',
        'show_common_fields': 'showCommonFields',
        'show_hide_icon': 'showHideIcon'
    }

    def __init__(self, name=None, quick_add_enabled=None, custom_input_texts=None, custom_selects=None, selects=None, custom_multi_selects=None, multi_selects=None, custom_checkboxes=None, enabled=None, show_common_fields=None, show_hide_icon=None):  # noqa: E501
        """ServiceSettingJson - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._quick_add_enabled = None
        self._custom_input_texts = None
        self._custom_selects = None
        self._selects = None
        self._custom_multi_selects = None
        self._multi_selects = None
        self._custom_checkboxes = None
        self._enabled = None
        self._show_common_fields = None
        self._show_hide_icon = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if quick_add_enabled is not None:
            self.quick_add_enabled = quick_add_enabled
        if custom_input_texts is not None:
            self.custom_input_texts = custom_input_texts
        if custom_selects is not None:
            self.custom_selects = custom_selects
        if selects is not None:
            self.selects = selects
        if custom_multi_selects is not None:
            self.custom_multi_selects = custom_multi_selects
        if multi_selects is not None:
            self.multi_selects = multi_selects
        if custom_checkboxes is not None:
            self.custom_checkboxes = custom_checkboxes
        if enabled is not None:
            self.enabled = enabled
        if show_common_fields is not None:
            self.show_common_fields = show_common_fields
        if show_hide_icon is not None:
            self.show_hide_icon = show_hide_icon

    @property
    def name(self):
        """Gets the name of this ServiceSettingJson.  # noqa: E501


        :return: The name of this ServiceSettingJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceSettingJson.


        :param name: The name of this ServiceSettingJson.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def quick_add_enabled(self):
        """Gets the quick_add_enabled of this ServiceSettingJson.  # noqa: E501


        :return: The quick_add_enabled of this ServiceSettingJson.  # noqa: E501
        :rtype: bool
        """
        return self._quick_add_enabled

    @quick_add_enabled.setter
    def quick_add_enabled(self, quick_add_enabled):
        """Sets the quick_add_enabled of this ServiceSettingJson.


        :param quick_add_enabled: The quick_add_enabled of this ServiceSettingJson.  # noqa: E501
        :type: bool
        """

        self._quick_add_enabled = quick_add_enabled

    @property
    def custom_input_texts(self):
        """Gets the custom_input_texts of this ServiceSettingJson.  # noqa: E501


        :return: The custom_input_texts of this ServiceSettingJson.  # noqa: E501
        :rtype: list[CustomInputTextJson]
        """
        return self._custom_input_texts

    @custom_input_texts.setter
    def custom_input_texts(self, custom_input_texts):
        """Sets the custom_input_texts of this ServiceSettingJson.


        :param custom_input_texts: The custom_input_texts of this ServiceSettingJson.  # noqa: E501
        :type: list[CustomInputTextJson]
        """

        self._custom_input_texts = custom_input_texts

    @property
    def custom_selects(self):
        """Gets the custom_selects of this ServiceSettingJson.  # noqa: E501


        :return: The custom_selects of this ServiceSettingJson.  # noqa: E501
        :rtype: list[CustomSelectJson]
        """
        return self._custom_selects

    @custom_selects.setter
    def custom_selects(self, custom_selects):
        """Sets the custom_selects of this ServiceSettingJson.


        :param custom_selects: The custom_selects of this ServiceSettingJson.  # noqa: E501
        :type: list[CustomSelectJson]
        """

        self._custom_selects = custom_selects

    @property
    def selects(self):
        """Gets the selects of this ServiceSettingJson.  # noqa: E501


        :return: The selects of this ServiceSettingJson.  # noqa: E501
        :rtype: list[SelectJson]
        """
        return self._selects

    @selects.setter
    def selects(self, selects):
        """Sets the selects of this ServiceSettingJson.


        :param selects: The selects of this ServiceSettingJson.  # noqa: E501
        :type: list[SelectJson]
        """

        self._selects = selects

    @property
    def custom_multi_selects(self):
        """Gets the custom_multi_selects of this ServiceSettingJson.  # noqa: E501


        :return: The custom_multi_selects of this ServiceSettingJson.  # noqa: E501
        :rtype: list[CustomMultiSelectJson]
        """
        return self._custom_multi_selects

    @custom_multi_selects.setter
    def custom_multi_selects(self, custom_multi_selects):
        """Sets the custom_multi_selects of this ServiceSettingJson.


        :param custom_multi_selects: The custom_multi_selects of this ServiceSettingJson.  # noqa: E501
        :type: list[CustomMultiSelectJson]
        """

        self._custom_multi_selects = custom_multi_selects

    @property
    def multi_selects(self):
        """Gets the multi_selects of this ServiceSettingJson.  # noqa: E501


        :return: The multi_selects of this ServiceSettingJson.  # noqa: E501
        :rtype: list[MultiSelectJson]
        """
        return self._multi_selects

    @multi_selects.setter
    def multi_selects(self, multi_selects):
        """Sets the multi_selects of this ServiceSettingJson.


        :param multi_selects: The multi_selects of this ServiceSettingJson.  # noqa: E501
        :type: list[MultiSelectJson]
        """

        self._multi_selects = multi_selects

    @property
    def custom_checkboxes(self):
        """Gets the custom_checkboxes of this ServiceSettingJson.  # noqa: E501


        :return: The custom_checkboxes of this ServiceSettingJson.  # noqa: E501
        :rtype: list[CustomCheckboxJson]
        """
        return self._custom_checkboxes

    @custom_checkboxes.setter
    def custom_checkboxes(self, custom_checkboxes):
        """Sets the custom_checkboxes of this ServiceSettingJson.


        :param custom_checkboxes: The custom_checkboxes of this ServiceSettingJson.  # noqa: E501
        :type: list[CustomCheckboxJson]
        """

        self._custom_checkboxes = custom_checkboxes

    @property
    def enabled(self):
        """Gets the enabled of this ServiceSettingJson.  # noqa: E501


        :return: The enabled of this ServiceSettingJson.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ServiceSettingJson.


        :param enabled: The enabled of this ServiceSettingJson.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def show_common_fields(self):
        """Gets the show_common_fields of this ServiceSettingJson.  # noqa: E501


        :return: The show_common_fields of this ServiceSettingJson.  # noqa: E501
        :rtype: bool
        """
        return self._show_common_fields

    @show_common_fields.setter
    def show_common_fields(self, show_common_fields):
        """Sets the show_common_fields of this ServiceSettingJson.


        :param show_common_fields: The show_common_fields of this ServiceSettingJson.  # noqa: E501
        :type: bool
        """

        self._show_common_fields = show_common_fields

    @property
    def show_hide_icon(self):
        """Gets the show_hide_icon of this ServiceSettingJson.  # noqa: E501


        :return: The show_hide_icon of this ServiceSettingJson.  # noqa: E501
        :rtype: bool
        """
        return self._show_hide_icon

    @show_hide_icon.setter
    def show_hide_icon(self, show_hide_icon):
        """Sets the show_hide_icon of this ServiceSettingJson.


        :param show_hide_icon: The show_hide_icon of this ServiceSettingJson.  # noqa: E501
        :type: bool
        """

        self._show_hide_icon = show_hide_icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceSettingJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceSettingJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
