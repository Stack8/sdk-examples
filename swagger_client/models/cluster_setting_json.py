# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClusterSettingJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'phone_service_metadata_map': 'dict(str, PhoneServiceMetadataJson)',
        'device_model_settings_map': 'dict(str, DeviceModelSettingsJson)',
        'cucm_version': 'str',
        'cucm_server_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'phone_service_metadata_map': 'phoneServiceMetadataMap',
        'device_model_settings_map': 'deviceModelSettingsMap',
        'cucm_version': 'cucmVersion',
        'cucm_server_id': 'cucmServerId'
    }

    def __init__(self, id=None, name=None, phone_service_metadata_map=None, device_model_settings_map=None, cucm_version=None, cucm_server_id=None):  # noqa: E501
        """ClusterSettingJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._phone_service_metadata_map = None
        self._device_model_settings_map = None
        self._cucm_version = None
        self._cucm_server_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if phone_service_metadata_map is not None:
            self.phone_service_metadata_map = phone_service_metadata_map
        if device_model_settings_map is not None:
            self.device_model_settings_map = device_model_settings_map
        if cucm_version is not None:
            self.cucm_version = cucm_version
        if cucm_server_id is not None:
            self.cucm_server_id = cucm_server_id

    @property
    def id(self):
        """Gets the id of this ClusterSettingJson.  # noqa: E501


        :return: The id of this ClusterSettingJson.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterSettingJson.


        :param id: The id of this ClusterSettingJson.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClusterSettingJson.  # noqa: E501


        :return: The name of this ClusterSettingJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterSettingJson.


        :param name: The name of this ClusterSettingJson.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_service_metadata_map(self):
        """Gets the phone_service_metadata_map of this ClusterSettingJson.  # noqa: E501


        :return: The phone_service_metadata_map of this ClusterSettingJson.  # noqa: E501
        :rtype: dict(str, PhoneServiceMetadataJson)
        """
        return self._phone_service_metadata_map

    @phone_service_metadata_map.setter
    def phone_service_metadata_map(self, phone_service_metadata_map):
        """Sets the phone_service_metadata_map of this ClusterSettingJson.


        :param phone_service_metadata_map: The phone_service_metadata_map of this ClusterSettingJson.  # noqa: E501
        :type: dict(str, PhoneServiceMetadataJson)
        """

        self._phone_service_metadata_map = phone_service_metadata_map

    @property
    def device_model_settings_map(self):
        """Gets the device_model_settings_map of this ClusterSettingJson.  # noqa: E501


        :return: The device_model_settings_map of this ClusterSettingJson.  # noqa: E501
        :rtype: dict(str, DeviceModelSettingsJson)
        """
        return self._device_model_settings_map

    @device_model_settings_map.setter
    def device_model_settings_map(self, device_model_settings_map):
        """Sets the device_model_settings_map of this ClusterSettingJson.


        :param device_model_settings_map: The device_model_settings_map of this ClusterSettingJson.  # noqa: E501
        :type: dict(str, DeviceModelSettingsJson)
        """

        self._device_model_settings_map = device_model_settings_map

    @property
    def cucm_version(self):
        """Gets the cucm_version of this ClusterSettingJson.  # noqa: E501


        :return: The cucm_version of this ClusterSettingJson.  # noqa: E501
        :rtype: str
        """
        return self._cucm_version

    @cucm_version.setter
    def cucm_version(self, cucm_version):
        """Sets the cucm_version of this ClusterSettingJson.


        :param cucm_version: The cucm_version of this ClusterSettingJson.  # noqa: E501
        :type: str
        """

        self._cucm_version = cucm_version

    @property
    def cucm_server_id(self):
        """Gets the cucm_server_id of this ClusterSettingJson.  # noqa: E501


        :return: The cucm_server_id of this ClusterSettingJson.  # noqa: E501
        :rtype: int
        """
        return self._cucm_server_id

    @cucm_server_id.setter
    def cucm_server_id(self, cucm_server_id):
        """Sets the cucm_server_id of this ClusterSettingJson.


        :param cucm_server_id: The cucm_server_id of this ClusterSettingJson.  # noqa: E501
        :type: int
        """

        self._cucm_server_id = cucm_server_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterSettingJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterSettingJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
