# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LineGroupJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'rna_reversion_timeout': 'int',
        'auto_log_off_hunt': 'bool',
        'hunt_algorithm_busy': 'str',
        'hunt_algorithm_no_answer': 'str',
        'hunt_algorithm_not_available': 'str',
        'distribution_algorithm': 'str',
        'members': 'list[LineGroupMemberJson]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'rna_reversion_timeout': 'rnaReversionTimeout',
        'auto_log_off_hunt': 'autoLogOffHunt',
        'hunt_algorithm_busy': 'huntAlgorithmBusy',
        'hunt_algorithm_no_answer': 'huntAlgorithmNoAnswer',
        'hunt_algorithm_not_available': 'huntAlgorithmNotAvailable',
        'distribution_algorithm': 'distributionAlgorithm',
        'members': 'members'
    }

    def __init__(self, id=None, name=None, rna_reversion_timeout=None, auto_log_off_hunt=None, hunt_algorithm_busy=None, hunt_algorithm_no_answer=None, hunt_algorithm_not_available=None, distribution_algorithm=None, members=None):  # noqa: E501
        """LineGroupJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._rna_reversion_timeout = None
        self._auto_log_off_hunt = None
        self._hunt_algorithm_busy = None
        self._hunt_algorithm_no_answer = None
        self._hunt_algorithm_not_available = None
        self._distribution_algorithm = None
        self._members = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if rna_reversion_timeout is not None:
            self.rna_reversion_timeout = rna_reversion_timeout
        if auto_log_off_hunt is not None:
            self.auto_log_off_hunt = auto_log_off_hunt
        self.hunt_algorithm_busy = hunt_algorithm_busy
        self.hunt_algorithm_no_answer = hunt_algorithm_no_answer
        self.hunt_algorithm_not_available = hunt_algorithm_not_available
        self.distribution_algorithm = distribution_algorithm
        self.members = members

    @property
    def id(self):
        """Gets the id of this LineGroupJson.  # noqa: E501


        :return: The id of this LineGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LineGroupJson.


        :param id: The id of this LineGroupJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LineGroupJson.  # noqa: E501


        :return: The name of this LineGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LineGroupJson.


        :param name: The name of this LineGroupJson.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rna_reversion_timeout(self):
        """Gets the rna_reversion_timeout of this LineGroupJson.  # noqa: E501


        :return: The rna_reversion_timeout of this LineGroupJson.  # noqa: E501
        :rtype: int
        """
        return self._rna_reversion_timeout

    @rna_reversion_timeout.setter
    def rna_reversion_timeout(self, rna_reversion_timeout):
        """Sets the rna_reversion_timeout of this LineGroupJson.


        :param rna_reversion_timeout: The rna_reversion_timeout of this LineGroupJson.  # noqa: E501
        :type: int
        """

        self._rna_reversion_timeout = rna_reversion_timeout

    @property
    def auto_log_off_hunt(self):
        """Gets the auto_log_off_hunt of this LineGroupJson.  # noqa: E501


        :return: The auto_log_off_hunt of this LineGroupJson.  # noqa: E501
        :rtype: bool
        """
        return self._auto_log_off_hunt

    @auto_log_off_hunt.setter
    def auto_log_off_hunt(self, auto_log_off_hunt):
        """Sets the auto_log_off_hunt of this LineGroupJson.


        :param auto_log_off_hunt: The auto_log_off_hunt of this LineGroupJson.  # noqa: E501
        :type: bool
        """

        self._auto_log_off_hunt = auto_log_off_hunt

    @property
    def hunt_algorithm_busy(self):
        """Gets the hunt_algorithm_busy of this LineGroupJson.  # noqa: E501


        :return: The hunt_algorithm_busy of this LineGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._hunt_algorithm_busy

    @hunt_algorithm_busy.setter
    def hunt_algorithm_busy(self, hunt_algorithm_busy):
        """Sets the hunt_algorithm_busy of this LineGroupJson.


        :param hunt_algorithm_busy: The hunt_algorithm_busy of this LineGroupJson.  # noqa: E501
        :type: str
        """
        if hunt_algorithm_busy is None:
            raise ValueError("Invalid value for `hunt_algorithm_busy`, must not be `None`")  # noqa: E501

        self._hunt_algorithm_busy = hunt_algorithm_busy

    @property
    def hunt_algorithm_no_answer(self):
        """Gets the hunt_algorithm_no_answer of this LineGroupJson.  # noqa: E501


        :return: The hunt_algorithm_no_answer of this LineGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._hunt_algorithm_no_answer

    @hunt_algorithm_no_answer.setter
    def hunt_algorithm_no_answer(self, hunt_algorithm_no_answer):
        """Sets the hunt_algorithm_no_answer of this LineGroupJson.


        :param hunt_algorithm_no_answer: The hunt_algorithm_no_answer of this LineGroupJson.  # noqa: E501
        :type: str
        """
        if hunt_algorithm_no_answer is None:
            raise ValueError("Invalid value for `hunt_algorithm_no_answer`, must not be `None`")  # noqa: E501

        self._hunt_algorithm_no_answer = hunt_algorithm_no_answer

    @property
    def hunt_algorithm_not_available(self):
        """Gets the hunt_algorithm_not_available of this LineGroupJson.  # noqa: E501


        :return: The hunt_algorithm_not_available of this LineGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._hunt_algorithm_not_available

    @hunt_algorithm_not_available.setter
    def hunt_algorithm_not_available(self, hunt_algorithm_not_available):
        """Sets the hunt_algorithm_not_available of this LineGroupJson.


        :param hunt_algorithm_not_available: The hunt_algorithm_not_available of this LineGroupJson.  # noqa: E501
        :type: str
        """
        if hunt_algorithm_not_available is None:
            raise ValueError("Invalid value for `hunt_algorithm_not_available`, must not be `None`")  # noqa: E501

        self._hunt_algorithm_not_available = hunt_algorithm_not_available

    @property
    def distribution_algorithm(self):
        """Gets the distribution_algorithm of this LineGroupJson.  # noqa: E501


        :return: The distribution_algorithm of this LineGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._distribution_algorithm

    @distribution_algorithm.setter
    def distribution_algorithm(self, distribution_algorithm):
        """Sets the distribution_algorithm of this LineGroupJson.


        :param distribution_algorithm: The distribution_algorithm of this LineGroupJson.  # noqa: E501
        :type: str
        """
        if distribution_algorithm is None:
            raise ValueError("Invalid value for `distribution_algorithm`, must not be `None`")  # noqa: E501

        self._distribution_algorithm = distribution_algorithm

    @property
    def members(self):
        """Gets the members of this LineGroupJson.  # noqa: E501


        :return: The members of this LineGroupJson.  # noqa: E501
        :rtype: list[LineGroupMemberJson]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this LineGroupJson.


        :param members: The members of this LineGroupJson.  # noqa: E501
        :type: list[LineGroupMemberJson]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineGroupJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineGroupJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
