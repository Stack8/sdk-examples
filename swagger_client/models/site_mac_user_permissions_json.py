# coding: utf-8

"""
    Helpdesk REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.8.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SiteMacUserPermissionsJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permissions': 'list[SiteMacUserPermissionJson]',
        'group_not_found': 'bool',
        'naming_error': 'bool'
    }

    attribute_map = {
        'permissions': 'permissions',
        'group_not_found': 'groupNotFound',
        'naming_error': 'namingError'
    }

    def __init__(self, permissions=None, group_not_found=None, naming_error=None):  # noqa: E501
        """SiteMacUserPermissionsJson - a model defined in Swagger"""  # noqa: E501
        self._permissions = None
        self._group_not_found = None
        self._naming_error = None
        self.discriminator = None
        if permissions is not None:
            self.permissions = permissions
        if group_not_found is not None:
            self.group_not_found = group_not_found
        if naming_error is not None:
            self.naming_error = naming_error

    @property
    def permissions(self):
        """Gets the permissions of this SiteMacUserPermissionsJson.  # noqa: E501


        :return: The permissions of this SiteMacUserPermissionsJson.  # noqa: E501
        :rtype: list[SiteMacUserPermissionJson]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this SiteMacUserPermissionsJson.


        :param permissions: The permissions of this SiteMacUserPermissionsJson.  # noqa: E501
        :type: list[SiteMacUserPermissionJson]
        """

        self._permissions = permissions

    @property
    def group_not_found(self):
        """Gets the group_not_found of this SiteMacUserPermissionsJson.  # noqa: E501


        :return: The group_not_found of this SiteMacUserPermissionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._group_not_found

    @group_not_found.setter
    def group_not_found(self, group_not_found):
        """Sets the group_not_found of this SiteMacUserPermissionsJson.


        :param group_not_found: The group_not_found of this SiteMacUserPermissionsJson.  # noqa: E501
        :type: bool
        """

        self._group_not_found = group_not_found

    @property
    def naming_error(self):
        """Gets the naming_error of this SiteMacUserPermissionsJson.  # noqa: E501


        :return: The naming_error of this SiteMacUserPermissionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._naming_error

    @naming_error.setter
    def naming_error(self, naming_error):
        """Sets the naming_error of this SiteMacUserPermissionsJson.


        :param naming_error: The naming_error of this SiteMacUserPermissionsJson.  # noqa: E501
        :type: bool
        """

        self._naming_error = naming_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteMacUserPermissionsJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteMacUserPermissionsJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
